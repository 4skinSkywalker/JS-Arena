{
  "description": "### First Operation Character\n\nThe task of this problem is to determine the position of the first arithmetic operation with the highest priority in an arithmetic expression. The operations that are considered in this problem are '+', '-', '*', and '/'. The priorities of these operations are '+', '-' - 1 and '*' - 2. When the string 'expr' contains both '*' and '+', the result would be the position of the '*' operator. If the string contains more than one operation with the same level of priority then the result would be the position of the first occurrence.\n\nInput: A non-empty string 'expr' composed of digits, parentheses, operations - '+', '-', '*', and '/'. The expression is correct, i.e. it contains no syntax errors. It also does not contain any whitespace characters.\nOutput: The position of the first arithmetic operation in 'expr' with the highest priority.\n\nExample:\n\n```js firstOperationCharacter(\"(2 + 2) * 2\") // returns 3 ```",
  
  "tests": [
    {
      "input": "(2 + 2) * 2",
      "expectedOutput": 3
    },
    {
      "input": "2 + 2 * 2",
      "expectedOutput": 6
    },
    {
      "input": "((2 + 2) * 2) * 3 + (2 + (2 * 2))",
      "expectedOutput": 28
    },
    {
      "input": "2+((22+2222)+(2222+222))",
      "expectedOutput": 6
    },
    {
      "input": "2 + 3 * 45 * 56 + 198 + 10938 * 102938 + 5",
      "expectedOutput": 6
    }
  ]
}